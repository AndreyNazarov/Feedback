{"version":3,"sources":["components/buttons/buttons.js","components/Statistics/Statistics.js","components/Feedback/Feedback.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["buttons","id","value","Statistics","good","neutral","bad","total","positiveFeedback","className","s","wrapper","item","Feedback","onHandleIncrement","list","map","onClick","evt","Section","title","children","Notification","message","notification","App","state","handleIncrement","target","setState","prevState","handleTotal","feedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAMeA,G,MANC,CACd,CAAEC,GAAI,EAAGC,MAAO,QAChB,CAAED,GAAI,EAAGC,MAAO,WAChB,CAAED,GAAI,EAAGC,MAAO,S,gBC6BHC,EA7BI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC/C,OACE,qBAAKC,UAAWC,IAAEC,QAAlB,SACE,+BACE,oBAAeF,UAAWC,IAAEE,KAA5B,SACE,0CAAaR,MADP,QAGR,oBAAkBK,UAAWC,IAAEE,KAA/B,SACE,6CAAgBP,MADV,WAGR,oBAAcI,UAAWC,IAAEE,KAA3B,SACE,yCAAYN,MADN,OAGR,oBAAgBG,UAAWC,IAAEE,KAA7B,SACE,2CAAcL,MADR,SAGR,oBAA2BE,UAAWC,IAAEE,KAAxC,SACE,sDAAyBJ,EAAzB,QADM,0B,gBCgBDK,EAhCE,SAAC,GAAoC,IAAlCb,EAAiC,EAAjCA,QAASc,EAAwB,EAAxBA,kBAC3B,OACE,qBAAKL,UAAU,UAAf,SACE,oBAAIA,UAAWC,IAAEK,KAAjB,SACGf,EAAQgB,KAAI,YAAoB,IAAjBf,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAClB,OACE,oBAAIO,UAAWC,IAAEE,KAAjB,SACE,wBACEV,MAAOA,EACPe,QAAS,SAACC,GACRJ,EAAkBI,IAHtB,SAMGhB,KAPuBD,W,gBCOzBkB,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,oBAAIZ,UAAWC,IAAEU,MAAjB,SAAyBA,IACxBC,M,iBCGQC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,oBAAId,UAAWC,IAAEc,aAAjB,SAAgCD,KCyD1BE,E,4MApDbC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,gBAAkB,YAAiB,IACzBzB,EADwB,EAAb0B,OACX1B,MACR,EAAK2B,UAAS,SAACC,GAAD,sBACX5B,EAAQ4B,EAAU5B,GAAS,O,EAIhC6B,YAAc,WAAO,IAAD,EACa,EAAKL,MACpC,OAFkB,EACVtB,KADU,EACJC,QADI,EACKC,K,EAIzBE,iBAAmB,WAAO,IAAD,EACQ,EAAKkB,MAA5BtB,EADe,EACfA,KACF4B,EAAsB5B,GAAQA,EAFb,EACTC,QADS,EACAC,KACsC,IAC7D,OAAO2B,KAAKC,MAAMF,I,uDAGV,IAAD,EACwBG,KAAKT,MAA5BtB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,sBAAKG,UAAU,YAAf,UACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACEpB,QAASA,EACTc,kBAAmBqB,KAAKR,oBAG3BQ,KAAKT,MAAMtB,MAAQ+B,KAAKT,MAAMrB,SAAW8B,KAAKT,MAAMpB,IACnD,cAAC,EAAD,CAASc,MAAM,aAAf,SACE,cAAC,EAAD,CACEhB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO4B,KAAKJ,cACZvB,iBAAkB2B,KAAK3B,uBAI3B,cAAC,EAAD,CAAce,QAAS,iC,GA9Cfa,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c32ba7e6.chunk.js","sourcesContent":["const buttons = [\r\n  { id: 1, value: \"good\" },\r\n  { id: 2, value: \"neutral\" },\r\n  { id: 3, value: \"bad\" },\r\n];\r\n\r\nexport default buttons;\r\n","import s from \"./Statistics.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => {\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <ul>\r\n        <li key=\"good\" className={s.item}>\r\n          <span>good: {good}</span>\r\n        </li>\r\n        <li key=\"neutral\" className={s.item}>\r\n          <span>neutral: {neutral}</span>\r\n        </li>\r\n        <li key=\"bad\" className={s.item}>\r\n          <span>bad: {bad}</span>\r\n        </li>\r\n        <li key=\"total\" className={s.item}>\r\n          <span>total: {total}</span>\r\n        </li>\r\n        <li key=\"positiveFeedback\" className={s.item}>\r\n          <span>positiveFeedback: {positiveFeedback}%</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedback: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import s from \"./Feedback.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Feedback = ({ buttons, onHandleIncrement }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <ul className={s.list}>\r\n        {buttons.map(({ id, value }) => {\r\n          return (\r\n            <li className={s.item} key={id}>\r\n              <button\r\n                value={value}\r\n                onClick={(evt) => {\r\n                  onHandleIncrement(evt);\r\n                }}\r\n              >\r\n                {value}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedback.propTypes = {\r\n  buttons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      value: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Feedback;\r\n","import s from \"./Section.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import s from \"./Notification.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <h2 className={s.notification}>{message}</h2>;\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport buttons from \"./components/buttons/buttons\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Feedback from \"./components/Feedback/Feedback\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = ({ target }) => {\n    const { value } = target;\n    this.setState((prevState) => ({\n      [value]: prevState[value] + 1,\n    }));\n  };\n\n  handleTotal = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  positiveFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const feedbackPercentage = (good / (good + neutral + bad)) * 100;\n    return Math.round(feedbackPercentage);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"container\">\n        <Section title=\"Please leave feedback\">\n          <Feedback\n            buttons={buttons}\n            onHandleIncrement={this.handleIncrement}\n          ></Feedback>\n        </Section>\n        {this.state.good || this.state.neutral || this.state.bad ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.handleTotal()}\n              positiveFeedback={this.positiveFeedback()}\n            ></Statistics>\n          </Section>\n        ) : (\n          <Notification message={\"No feedback was given\"}></Notification>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}